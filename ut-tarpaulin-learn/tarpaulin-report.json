{"files":[{"path":["D:","\\","codes","rust-learn","ut-tarpaulin-learn","src","main.rs"],"content":"mod functions;\nmod unit_test;\n#[cfg(not(tarpaulin_include))]\nfn main() {\n    add3(2, 4);\n    println!(\"Hello, world!\");\n}\n\n#[derive(Debug, Clone)]\npub struct FtpServer {\n    pub ip: String,\n    pub port: u32,\n    pub user: String,\n    pub password: String,\n}\n\npub fn add3(a: i32, b: i32) -> i32 {\n    if a > 0 {\n        a - b\n    } else {\n        a + b\n    }\n}\n\n","traces":[{"line":17,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":18,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":21,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":4,"coverable":4},{"path":["D:","\\","codes","rust-learn","ut-tarpaulin-learn","src","unit_test.rs"],"content":"#[cfg(test)]\r\nmod test_main {\r\n    use crate::add3;\r\n\r\n    #[test]\r\n    fn test_add() {\r\n        let a = -1;\r\n        let b = 3;\r\n        let sum = add3(a, b);\r\n\r\n        assert_eq!(a + b, sum);\r\n\r\n        let a = 11;\r\n        let b = 3;\r\n        let sum = add3(a, b);\r\n\r\n        assert_eq!(a - b, sum);\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use crate::functions::MockDataService;\r\n    \r\n    use super::*;\r\n    use crate::functions::{DataService, DataStruct};\r\n    use mockall::predicate::*;\r\n    use mockall::*;\r\n\r\n    #[test]\r\n    fn test_data_service() {\r\n        // 创建模拟对象\r\n        let mut mock_data_struct = MockDataService::new();\r\n\r\n        let d = DataStruct::new();\r\n        // 定义模拟对象的行为\r\n        mock_data_struct\r\n            .expect_get_data()\r\n            .returning(|id| format!(\"Processed data for id {}\", id));\r\n\r\n        // 使用模拟对象进行测试\r\n        assert_eq!(mock_data_struct.get_data(42), d.get_data(42));\r\n    }\r\n}\r\n","traces":[],"covered":0,"coverable":0}]}